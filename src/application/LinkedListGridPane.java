package application;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.layout.GridPane;

public class LinkedListGridPane extends GridPane implements EventHandler<ActionEvent> {

	/**Submit button for adding new points*/
	private Button submitB;

	/**Text field for accepting new a new x coordinate*/
	private TextField x;

	/**Text field for accepting a new y coordinate*/
	private TextField y;

	/**Button to calculate the perimeter of the shape generated by the vertices in the list*/
	private Button calculatePerimeter;

	/**The text area where all the text will be put into*/
	private TextArea centerTA;

	/**The linked list which will store the data*/
	private LinkedList linkedlist;

	/**Button to clear the LinkedList*/
	private Button clear;

	/**
	 * Constructor for the Linked List's Grid Pane
	 * @param ta The text area to be displayed to which is passed in from the main
	 */
	public LinkedListGridPane(TextArea ta){
		centerTA = ta;

		//Initialize the LinkedList
		linkedlist = new LinkedList();

		//Initialize the X-Coordinate Line
		add(new Label("X-Coordinate"), 0, 0);
		x = new TextField();
		add(x, 1, 0);

		//Initialize the Y-Coordinate Line
		add(new Label("Y-Coordinate"), 0, 1);
		y = new TextField();
		add(y, 1, 1);

		//Initialize the Submit Button
		submitB = new Button("Submit");
		add(submitB,0,2);
		submitB.setOnAction(this);

		//Initialize the CalculatePerimeter Button
		calculatePerimeter = new Button("Calculate Perimeter");
		add(calculatePerimeter, 0, 3);
		calculatePerimeter.setOnAction(this);

		//Initialize the Clear Button
		clear = new Button("Clear");
		add(clear, 1, 3);
		clear.setOnAction(this);

	}

	/**
	 * Handles all the action events from the three different buttons
	 */
	public void handle(ActionEvent event) {
		if(event.getSource().equals(clear)){
			try{
				//Clearing the x and y textfields
				x.setText(null);
				y.setText(null);
				
				//Clears the linked list
				linkedlist.clear();
				
				//Clears the text area
				centerTA.setText("");
			}catch(Exception e){ 
				//Says that the list is already empty, if the user cared. They don't.
				//Could be useful, but not needed.
			}
		}else if(event.getSource().equals(calculatePerimeter)){
			try{

				//Throws some exceptions based on whether or not the perimeter can be evaluated
				if(linkedlist.getLength() == 1)
					throw new Exception("A point does not have a perimeter.");
				else if(linkedlist.getLength() == 2){
					Alert alert = new Alert(Alert.AlertType.INFORMATION);
					alert.setContentText("Uhm. Wat. You do understand that a perimeter doesn't"
							+ " exist for a line. That would be called the length >.>' but sure,"
							+ " I can calculate this for you. If you really want. Press okay if your sure."
							+ " Like certain, certain.");
					alert.setTitle("You're silly, friend.");
					alert.setHeaderText("You want me to do what?");
					alert.showAndWait();
				}
				else if(linkedlist.getLength() == 0)
					throw new Exception("If one has nothing, one cannot possess a"
							+ " perimeter.");

				//Append the toString method to the textArea text
				centerTA.appendText(linkedlist.toString());

			}catch(Exception e){
				
				//Informs the user that the perimeter was not calculated
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText(e.getMessage());
				alert.setTitle("Perimeter not calculated");
				alert.showAndWait();

			}
		}else if(event.getSource().equals(submitB)){
			try{
				this.addNode();
			}catch(Exception e){
				
				//Informs the user that the point was not added successfully
				Alert alert = new Alert(AlertType.ERROR);
				alert.setTitle("Error: Point not added successfully");
				alert.setContentText("Please enter only integer values.");
				alert.showAndWait();

			}
		}
	}
	
	/**
	 * Adds the node and also updates the text area when called
	 * @throws Exception Thrown if there is an error in the input text fields
	 */
	public void addNode() throws Exception{
		//Retrieve x and y values for creation of a node
		int xvalue = Integer.parseInt(x.getText());
		int yvalue = Integer.parseInt(y.getText());

		//Creation of a node
		Node ntemp = new Node(xvalue,yvalue);
		
		//Adding the node to the linked list
		linkedlist.addToEnd(ntemp);
		
		//Updating the text area
		String s = centerTA.getText();
		s = s + ntemp.toString() + "\n";
		centerTA.setText(s);
		
		//Clear x and y text boxes
		x.clear();
		y.clear();
		
	}
	
	/**
	 * Method which calculates the perimeter when called and updates the text area to reflect this
	 * calculation
	 * @throws Exception Throws an exception if the perimeter cannot be calculated
	 */
	public void calculatePerimeter() throws Exception{
		//Throws some exceptions based on whether or not the perimeter can be evaluated
		if(linkedlist.getLength() == 1)
			throw new Exception("A point does not have a perimeter.");
		else if(linkedlist.getLength() == 2){
			Alert alert = new Alert(Alert.AlertType.INFORMATION);
			alert.setContentText("Uhm. Wat. You do understand that a perimeter doesn't"
					+ " exist for a line. That would be called the length >.>' but sure,"
					+ " I can calculate this for you. If you really want. Press okay if your sure."
					+ " Like certain, certain.");
			alert.setTitle("You're silly, friend.");
			alert.setHeaderText("You want me to do what?");
			alert.showAndWait();
		}
		else if(linkedlist.getLength() == 0)
			throw new Exception("If one has nothing, one cannot possess a"
					+ " perimeter.");

		//Append the toString method to the textArea text
		centerTA.appendText(linkedlist.toString());
		
	}
	
	/**
	 * Method to get the pointer for the submit button
	 * @return The pointer to the submit button
	 */
	public Button getSubmitButton(){
		return submitB;
	}
	
	/**
	 * Method to get the pointer to the calculate perimeter button
	 * @return The pointer to the calculate perimeter button
	 */
	public Button getCalculatePerimeterButton(){
		return calculatePerimeter;
	}
	
	/**
	 * Method to get the clear Button
	 * @return The pointer to the clear button
	 */
	public Button getClearButton(){
		return clear;
	}
	
	/**
	 * Method to get the pointer of the x text field
	 * @return The pointer to the x text field
	 */
	public TextField getXField(){
		return x;
	}
	
	/**
	 * Method to get the pointer of the y text field
	 * @return The pointer to the y text field
	 */
	public TextField getYField(){
		return y;
	}
	
	/**
	 * Method which gets the pointer of the text field
	 * @return
	 */
	public LinkedList getLinkedList(){
		return linkedlist;
	}

	/**
	 * Method which gets the pointer to the center text area
	 * @return The pointer to the center text area
	 */
	public TextArea getTextArea(){
		return centerTA;
	}
}
